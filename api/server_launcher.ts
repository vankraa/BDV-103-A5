import Koa from 'koa'
import cors from '@koa/cors'
import zodRouter from 'koa-zod-router'
import qs from 'koa-qs'
import { koaSwagger } from 'koa2-swagger-ui'
import { setupBookRoutes } from './src/books'
import { setupWarehouseRoutes } from './src/warehouse'
import { type AppWarehouseDatabaseState, getDefaultWarehouseDatabase } from './src/warehouse/warehouse_database'
import { type AppBookDatabaseState, getBookDatabase } from './src/database_access'
import swagger from './build/swagger.json'
import { type Server, type IncomingMessage, type ServerResponse } from 'http'

export async function createServer (port: number = 0, randomizeDB: boolean = false): Promise<Server<typeof IncomingMessage, typeof ServerResponse>> {
  const app = new Koa<AppBookDatabaseState & AppWarehouseDatabaseState, Koa.DefaultContext>()

  const bookDatabase = getBookDatabase(randomizeDB ? undefined : 'books')
  const warehouseDatabase = await getDefaultWarehouseDatabase(randomizeDB ? undefined : 'warehouse')

  const state = {
    books: bookDatabase,
    warehouse: warehouseDatabase
  }

  app.use(async (ctx, next) => {
    ctx.state = state
    await next()
  })

  qs(app)
  app.use(cors())

  const router = zodRouter({ zodRouter: { exposeRequestErrors: true } })
  setupBookRoutes(router, state.books)
  setupWarehouseRoutes(router, state.warehouse)
  app.use(router.routes())

  app.use(koaSwagger({
    routePrefix: '/docs',
    specPrefix: '/docs/spec',
    exposeSpec: true,
    swaggerOptions: {
      spec: swagger // This object is an import of the swagger.json generated by tsoa
    }
  }))

  return app.listen(port, () => {
    console.log(`Server listening on port ${port}`)
  })
}
